{"version":3,"sources":["node_modules/browser-pack/_prelude.js","lib/ApiWay.js","lib/Instance.js","lib/Project.js","lib/Requestable.js","lib/Schedule.js","lib/Scheduler.js","lib/User.js"],"names":[],"mappings":"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","file":"ApiWay.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * @file\n * @copyright  2017 BlueHack Inc.\n * @license    Licensed under MIT.\n *             Github.js is freely distributable.\n */\n/* eslint valid-jsdoc: [\"error\", {\"requireReturnDescription\": false}] */\n\nimport User from './User';\nimport Project from './Project';\nimport Instance from './Instance';\nimport Schedule from './Schedule';\nimport Scheduler from './Scheduler';\n\n/**\n * ApiWay encapsulates the functionality to create various API wrapper objects.\n */\nclass ApiWay {\n   /**\n    * Create a new ApiWay.\n    * @param {Requestable.auth} [auth] - the credentials to authenticate to ApiWay. If auth is\n    *                                  not provided requests will be made unauthenticated\n    * @param {string} [apiBase=https://api.apiway.io] - the base ApiWay API URL\n    */\n   // constructor(auth, apiBase = 'http://api.apiway.io') {\n    constructor(auth, apiBase = 'http://127.0.0.1:3000') {\n      this.__apiBase = apiBase;\n      this.__auth = auth || {};\n   }\n\n   /**\n    * Create a new User wrapper\n    * @param {string} [user] - the name of the user to get information about\n    *                        leave undefined for the authenticated user\n    * @return {User}\n    */\n   getUser(user) {\n      return new User(user, this.__auth, this.__apiBase);\n   }\n\n   /**\n    * Create a new Project wrapper\n    * @param {string} [fullName] - the name of the project to get information about\n    *                        leave undefined for the authenticated user\n    * @return {Project}\n    */\n   getProject(fullName) {\n      return new Project(fullName, this.__auth, this.__apiBase);\n   }\n\n   /**\n    * Create a new Instance wrapper\n    * @param {string} [instance] - the id of the instance to get information about\n    *                        leave undefined for the authenticated user\n    * @return {Instance}\n    */\n   getInstance(instance) {\n      return new Instance(instance, this.__auth, this.__apiBase);\n   }\n\n   /**\n    * Create a new Schedule wrapper\n    * @param {string} [scheduleId] - the id of the instance to get information about\n    *                        leave undefined for the authenticated user\n    * @return {Schedule}\n    */\n   getSchedule(scheduleId) {\n      return new Schedule(scheduleId, this.__auth, this.__apiBase);\n   }\n\n   /**\n    * Create a new Scheduler wrapper\n    * @param {string} [schedulerId] - the id of the instance to get information about\n    *                        leave undefined for the authenticated user\n    * @return {Schedule}\n    */\n   getScheduler(schedulerId) {\n      return new Scheduler(schedulerId, this.__auth, this.__apiBase);\n   }\n}\n\nmodule.exports = ApiWay;\n","/**\n * @file\n * @copyright  2017 BlueHack Inc.\n * @license    Licensed under MIT.\n *             Github.js is freely distributable.\n */\nimport Requestable from './Requestable';\nimport debug from 'debug';\nconst log = debug('apiway:instance');\n\n/**\n * A Project allows scoping of API requests to a particular ApiWay user.\n */\nclass Instance extends Requestable {\n   /**\n    * Create a Instance.\n    * @param {string} [instance] - the instance to use for user-scoped queries\n    * @param {Requestable.auth} [auth] - information required to authenticate to ApiWay\n    * @param {string} [apiBase=https://api.apiway.io] - the base ApiWay API URL\n    */\n   constructor(instance, auth, apiBase) {\n      super(auth, apiBase);\n      this.instanceId = instance;\n   }\n\n   /**\n    * Get project information\n    * @param {string} [projectId]\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\n    * @return {Promise} - the promise for the http request\n    */\n   getInstance(instanceId, cb) {\n     return this._request('GET', `/instances/${instanceId}`, null, cb);\n   }\n\n   /**\n    * Get user's project list\n    * @param {string} [userId]\n    * @param {object} options -\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\n    * @return {Promise} - the promise for the http request\n    */\n   getInstancesByUser(userId, options, cb) {\n      return this._request('GET', `/instances/users/${userId}`, options, cb);\n   }\n\n   /**\n    * Get project's instance list\n    * @param {string} [projectId]\n    * @param {object} options -\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\n    * @return {Promise} - the promise for the http request\n    */\n   getInstancesByProject(projectId, options, cb) {\n      return this._request('GET', `/instances/projects/${projectId}`, options, cb);\n   }\n\n   /**\n    * Add a new Instance\n    * @param {object} options -\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   addInstance(options, cb) {\n      return this._request('POST', '/instances', options, cb);\n   }\n\n   /**\n    * Update user's profile (Will create a new user if not exist)\n    * @param {object} options -\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   updateInstance(instanceId, options, cb) {\n      return this._request('PUT', `/instances/${instanceId}`, options, cb);\n   }\n}\n\nmodule.exports = Instance;\n","/**\n * @file\n * @copyright  2017 BlueHack Inc.\n * @license    Licensed under MIT.\n *             Github.js is freely distributable.\n */\n\nimport Requestable from './Requestable';\nimport debug from 'debug';\nconst log = debug('apiway:project');\n\n/**\n * A Project allows scoping of API requests to a particular ApiWay user.\n */\nclass Project extends Requestable {\n   /**\n    * Create a Project.\n    * @param {string} [fullName] - the project to use for user-scoped queries\n    * @param {Requestable.auth} [auth] - information required to authenticate to ApiWay\n    * @param {string} [apiBase=https://api.apiway.io] - the base ApiWay API URL\n    */\n   constructor(fullName, auth, apiBase) {\n      super(auth, apiBase);\n      this.fullName = fullName;\n   }\n\n   /**\n    * Get project information\n    * @param {string} [projectId]\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\n    * @return {Promise} - the promise for the http request\n    */\n   getProject(projectId, cb) {\n     return this._request('GET', `/projects/${projectId}`, null, cb);\n   }\n\n   /**\n    * Get user's project list\n    * @param {string} [userId]\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\n    * @return {Promise} - the promise for the http request\n    */\n   getProjectsByUser(userId, cb) {\n      return this._request('GET', `/projects/users/${userId}`, null, cb);\n   }\n\n   /**\n    * Add a repo as a Project\n    * @param {object} options -\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   addProject(options, cb) {\n      return this._request('POST', '/projects', options, cb);\n   }\n\n   /**\n    * Update data of project\n    * @param {string} [projectId]\n    * @param {object} options -\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   updateProject(projectId, options, cb) {\n      return this._request('PUT', `/projects/${projectId}`, options, cb);\n   }\n\n   /**\n    * Add a email subscriber\n    * @param {string} [projectId]\n    * @param {object} options -\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   addEmailSubscriber(projectId, options, cb) {\n      return this._request('POST', `/projects/${projectId}/subscribe/email`, options, cb);\n   }\n\n   /**\n    * Delete a email subscriber\n    * @param {string} [projectId]\n    * @param {object} options -\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   deleteEmailSubscriber(projectId, options, cb) {\n      return this._request('DELETE', `/projects/${projectId}/subscribe/email`, options, cb);\n   }\n\n   setScheduleId(projectId, scheduleId, cb) {\n      var options = {\n         scheduleId: scheduleId\n      }\n      return this._request('PUT', `/projects/${projectId}`, options, cb);\n   }\n\n   /**\n    * Update schedule of project\n    * @param {string} [projectId]\n    * @param {string} [when]\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   updateScheduleWhen (projectId, when, cb) {\n      let schedule = ''\n      if (when.endsWith('m')) {\n         schedule = `${when.replace('m', '')} * * * *`\n      } else if (when.endsWith('h')) {\n         schedule = `* ${when.replace('h', '')} * * *`\n      }\n      let options = {\n         schedule: schedule\n      }\n      return this._request('PUT', `/projects/${projectId}`, options, cb);\n   }\n\n   /**\n    * Update schedule of project\n    * @param {string} [projectId]\n    * @param {string} [interval]\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   updateScheduleInterval(projectId, interval, cb) {\n      let schedule = ''\n      if (interval.endsWith('h')) {\n         schedule = `* */${interval.replace('h', '')} * * *`\n      } else if (interval.endsWith('d')) {\n         schedule = `* * */${interval.replace('d', '')} * *`\n      }\n      let options = {\n         schedule: schedule\n      }\n      return this._request('PUT', `/projects/${projectId}`, options, cb);\n   }\n\n   /**\n    * Update schedule of project\n    * @param {string} [projectId]\n    * @param {string} [cron]\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   updateScheduleCron(projectId, cron, cb) {\n      let options = {\n         schedule: cron\n      }\n      return this._request('PUT', `/projects/${projectId}`, options, cb);\n   }\n\n   /**\n    * Delete a project\n    * @param {string} [projectId]\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   deleteProject(projectId, cb) {\n      return this._request('DELETE', `/projects/${projectId}`, null, cb);\n   }\n}\n\nmodule.exports = Project;\n","/**\n * @file\n * @copyright  2017 BlueHack Inc.\n * @license    Licensed under MIT.\n *             Github.js is freely distributable.\n */\n\nimport axios from 'axios';\nimport debug from 'debug';\nimport {Base64} from 'js-base64';\n\nconst log = debug('apiway:request');\n\n/**\n * The error structure returned when a network call fails\n */\nclass ResponseError extends Error {\n   /**\n    * Construct a new ResponseError\n    * @param {string} message - an message to return instead of the the default error message\n    * @param {string} path - the requested path\n    * @param {Object} response - the object returned by Axios\n    */\n   constructor(message, path, response) {\n      super(message);\n      this.path = path;\n      this.request = response.config;\n      this.response = (response || {}).response || response;\n      this.status = response.status;\n   }\n}\n\n/**\n * Requestable wraps the logic for making http requests to the API\n */\nclass Requestable {\n   /**\n    * Either a username and password or an oauth token for ApiWay\n    * @typedef {Object} Requestable.auth\n    * @prop {string} [username] - the ApiWay username\n    * @prop {string} [password] - the user's password\n    * @prop {token} [token] - an OAuth token\n    */\n   /**\n    * Initialize the http internals.\n    * @param {Requestable.auth} [auth] - the credentials to authenticate to ApiWay. If auth is\n    *                                  not provided request will be made unauthenticated\n    * @param {string} [apiBase=https://api.apiway.io] - the base ApiWay API URL\n    * @param {string} [AcceptHeader=v3] - the accept header for the requests\n    */\n   constructor(auth, apiBase, AcceptHeader) {\n      // this.__apiBase = apiBase || 'https://api.apiway.io';\n      this.__apiBase = apiBase || 'https://api.apiway.io';\n      this.__auth = {\n         token: auth.token,\n         username: auth.username,\n         password: auth.password,\n      };\n      this.__AcceptHeader = AcceptHeader || 'v3';\n\n      if (auth.token) {\n         this.__authorizationHeader = 'token ' + auth.token;\n      } else if (auth.username && auth.password) {\n         this.__authorizationHeader = 'Basic ' + Base64.encode(auth.username + ':' + auth.password);\n      }\n   }\n\n   /**\n    * Compute the URL to use to make a request.\n    * @private\n    * @param {string} path - either a URL relative to the API base or an absolute URL\n    * @return {string} - the URL to use\n    */\n   __getURL(path) {\n      let url = path;\n\n      if (path.indexOf('//') === -1) {\n         url = this.__apiBase + path;\n      }\n\n      let newCacheBuster = 'timestamp=' + new Date().getTime();\n      return url.replace(/(timestamp=\\d+)/, newCacheBuster);\n   }\n\n   /**\n    * Compute the headers required for an API request.\n    * @private\n    * @param {boolean} raw - if the request should be treated as JSON or as a raw request\n    * @param {string} AcceptHeader - the accept header for the request\n    * @return {Object} - the headers to use in the request\n    */\n   __getRequestHeaders(raw, AcceptHeader) {\n      let headers = {\n         'Content-Type': 'application/json;charset=UTF-8',\n         'Accept': 'application/vnd.apiway.' + (AcceptHeader || this.__AcceptHeader),\n      };\n\n      if (raw) {\n         headers.Accept += '.raw';\n      }\n      headers.Accept += '+json';\n\n      if (this.__authorizationHeader) {\n         headers.Authorization = this.__authorizationHeader;\n      }\n\n      return headers;\n   }\n\n   /**\n    * Sets the default options for API requests\n    * @protected\n    * @param {Object} [requestOptions={}] - the current options for the request\n    * @return {Object} - the options to pass to the request\n    */\n   _getOptionsWithDefaults(requestOptions = {}) {\n      if (!(requestOptions.visibility || requestOptions.affiliation)) {\n         requestOptions.type = requestOptions.type || 'all';\n      }\n      requestOptions.sort = requestOptions.sort || 'updated';\n      requestOptions.per_page = requestOptions.per_page || '100'; // eslint-disable-line\n\n      return requestOptions;\n   }\n\n   /**\n    * if a `Date` is passed to this function it will be converted to an ISO string\n    * @param {*} date - the object to attempt to cooerce into an ISO date string\n    * @return {string} - the ISO representation of `date` or whatever was passed in if it was not a date\n    */\n   _dateToISO(date) {\n      if (date && (date instanceof Date)) {\n         date = date.toISOString();\n      }\n\n      return date;\n   }\n\n   /**\n    * A function that receives the result of the API request.\n    * @callback Requestable.callback\n    * @param {Requestable.Error} error - the error returned by the API or `null`\n    * @param {(Object|true)} result - the data returned by the API or `true` if the API returns `204 No Content`\n    * @param {Object} request - the raw {@linkcode https://apiway.com/mzabriskie/axios#response-schema Response}\n    */\n   /**\n    * Make a request.\n    * @param {string} method - the method for the request (GET, PUT, POST, DELETE)\n    * @param {string} path - the path for the request\n    * @param {*} [data] - the data to send to the server. For HTTP methods that don't have a body the data\n    *                   will be sent as query parameters\n    * @param {Requestable.callback} [cb] - the callback for the request\n    * @param {boolean} [raw=false] - if the request should be sent as raw. If this is a falsy value then the\n    *                              request will be made as JSON\n    * @return {Promise} - the Promise for the http request\n    */\n   _request(method, path, data, cb, raw) {\n      const url = this.__getURL(path);\n      // console.log(url)\n\n      const AcceptHeader = (data || {}).AcceptHeader;\n      if (AcceptHeader) {\n         delete data.AcceptHeader;\n      }\n      const headers = this.__getRequestHeaders(raw, AcceptHeader);\n\n      let queryParams = {};\n\n      const shouldUseDataAsParams = data && (typeof data === 'object') && methodHasNoBody(method);\n      if (shouldUseDataAsParams) {\n         queryParams = data;\n         data = undefined;\n      }\n\n      const config = {\n         url: url,\n         method: method,\n         headers: headers,\n         params: queryParams,\n         data: data,\n         responseType: raw ? 'text' : 'json',\n      };\n\n      // console.log(config)\n      log(`${config.method} to ${config.url}`);\n      const requestPromise = axios(config).catch(callbackErrorOrThrow(cb, path));\n\n      if (cb) {\n         requestPromise.then((response) => {\n            if (response.data && Object.keys(response.data).length > 0) {\n               // When data has results\n               cb(null, response.data, response);\n            } else if (config.method !== 'GET' && Object.keys(response.data).length < 1) {\n               // True when successful submit a request and receive a empty object\n               cb(null, (response.status < 300), response);\n            } else {\n               cb(null, response.data, response);\n            }\n         });\n      }\n\n      return requestPromise;\n   }\n\n   /**\n    * Make a request to an endpoint the returns 204 when true and 404 when false\n    * @param {string} path - the path to request\n    * @param {Object} data - any query parameters for the request\n    * @param {Requestable.callback} cb - the callback that will receive `true` or `false`\n    * @param {method} [method=GET] - HTTP Method to use\n    * @return {Promise} - the promise for the http request\n    */\n   _request204or404(path, data, cb, method = 'GET') {\n      return this._request(method, path, data)\n         .then(function success(response) {\n            if (cb) {\n               cb(null, true, response);\n            }\n            return true;\n         }, function failure(response) {\n            if (response.response.status === 404) {\n               if (cb) {\n                  cb(null, false, response);\n               }\n               return false;\n            }\n\n            if (cb) {\n               cb(response);\n            }\n            throw response;\n         });\n   }\n\n   /**\n    * Make a request and fetch all the available data. ApiWay will paginate responses so for queries\n    * that might span multiple pages this method is preferred to {@link Requestable#request}\n    * @param {string} path - the path to request\n    * @param {Object} options - the query parameters to include\n    * @param {Requestable.callback} [cb] - the function to receive the data. The returned data will always be an array.\n    * @param {Object[]} results - the partial results. This argument is intended for interal use only.\n    * @return {Promise} - a promise which will resolve when all pages have been fetched\n    * @deprecated This will be folded into {@link Requestable#_request} in the 2.0 release.\n    */\n   _requestAllPages(path, options, cb, results) {\n      results = results || [];\n\n      return this._request('GET', path, options)\n         .then((response) => {\n            let thisGroup;\n            if (response.data instanceof Array) {\n               thisGroup = response.data;\n            } else if (response.data.items instanceof Array) {\n               thisGroup = response.data.items;\n            } else {\n               let message = `cannot figure out how to append ${response.data} to the result set`;\n               throw new ResponseError(message, path, response);\n            }\n            results.push(...thisGroup);\n\n            const nextUrl = getNextPage(response.headers.link);\n            if (nextUrl && typeof options.page !== 'number') {\n               log(`getting next page: ${nextUrl}`);\n               return this._requestAllPages(nextUrl, options, cb, results);\n            }\n\n            if (cb) {\n               cb(null, results, response);\n            }\n\n            response.data = results;\n            return response;\n         }).catch(callbackErrorOrThrow(cb, path));\n   }\n}\n\nmodule.exports = Requestable;\n\n// ////////////////////////// //\n//  Private helper functions  //\n// ////////////////////////// //\nconst METHODS_WITH_NO_BODY = ['GET', 'HEAD', 'DELETE'];\nfunction methodHasNoBody(method) {\n   return METHODS_WITH_NO_BODY.indexOf(method) !== -1;\n}\n\nfunction getNextPage(linksHeader = '') {\n   const links = linksHeader.split(/\\s*,\\s*/); // splits and strips the urls\n   return links.reduce(function(nextUrl, link) {\n      if (link.search(/rel=\"next\"/) !== -1) {\n         return (link.match(/<(.*)>/) || [])[1];\n      }\n\n      return nextUrl;\n   }, undefined);\n}\n\nfunction callbackErrorOrThrow(cb, path) {\n   return function handler(object) {\n      let error;\n      if (object.hasOwnProperty('config')) {\n         const {response: {status, statusText}, config: {method, url}} = object;\n         let message = (`${status} error making request ${method} ${url}: \"${statusText}\"`);\n         error = new ResponseError(message, path, object);\n         log(`${message} ${JSON.stringify(object.data)}`);\n      } else {\n         error = object;\n      }\n      if (cb) {\n         log('going to error callback');\n         cb(error);\n      } else {\n         log('throwing error');\n         throw error;\n      }\n   };\n}\n","/**\n * @file\n * @copyright  2017 BlueHack Inc.\n * @license    Licensed under MIT.\n *             Github.js is freely distributable.\n */\n\nimport Requestable from './Requestable';\nimport debug from 'debug';\nconst log = debug('apiway:schedule');\n\n/**\n * A Schedule allows scoping of API requests to a particular ApiWay user.\n */\nclass Schedule extends Requestable {\n   /**\n    * Create a Schedule.\n    * @param {string} [scheduleId] -\n    * @param {Requestable.auth} [auth] - information required to authenticate to ApiWay\n    * @param {string} [apiBase=https://api.apiway.io] - the base ApiWay API URL\n    */\n   constructor(scheduleId, auth, apiBase) {\n      super(auth, apiBase);\n      this.scheduleId = scheduleId;\n   }\n\n   /**\n    * Get schedule information\n    * @param {string} [scheduleId]\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\n    * @return {Promise} - the promise for the http request\n    */\n   getSchedule(scheduleId, cb) {\n     return this._request('GET', `/schedules/${scheduleId}`, null, cb);\n   }\n\n   /**\n    * Get schedule list\n    * @param {string} [scheduleId]\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\n    * @return {Promise} - the promise for the http request\n    */\n   getSchedules(options, cb) {\n      return this._request('GET', `/schedules`, options, cb);\n   }\n\n   /**\n    * Get user's schedules list\n    * @param {string} [userId]\n    * @param {object} options -\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\n    * @return {Promise} - the promise for the http request\n    */\n   getSchedulesByUser(userId, options, cb) {\n      return this._request('GET', `/schedules/users/${userId}`, options, cb);\n   }\n\n   /**\n    * Get project related schedule list\n    * @param {string} [projectId]\n    * @param {object} options -\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\n    * @return {Promise} - the promise for the http request\n    */\n   getSchedulesByProject(projectId, options, cb) {\n      return this._request('GET', `/schedules/projects/${projectId}`, options, cb);\n   }\n\n   /**\n    * Create a schedule\n    * @param {object} options -\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   addSchedule(options, cb) {\n      return this._request('POST', '/schedules', options, cb);\n   }\n\n   /**\n    * Update data of schedule\n    * @param {string} [scheduleId]\n    * @param {object} options -\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   updateSchedule(scheduleId, options, cb) {\n      return this._request('PUT', `/schedules/${scheduleId}`, options, cb);\n   }\n\n   /**\n    * Update cron of Schedule\n    * @param {string} [scheduleId]\n    * @param {string} [when]\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   updateScheduleWhen (scheduleId, when, cb) {\n      let schedule = ''\n      if (when.endsWith('m')) {\n         schedule = `${when.replace('m', '')} * * * *`\n      } else if (when.endsWith('h')) {\n         schedule = `* ${when.replace('h', '')} * * *`\n      }\n      let options = {\n         cron: schedule\n      }\n      return this._request('PUT', `/schedules/${scheduleId}`, options, cb);\n   }\n\n   /**\n    * Update cron of Schedule\n    * @param {string} [scheduleId]\n    * @param {string} [interval]\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   updateScheduleInterval(scheduleId, interval, cb) {\n      let schedule = ''\n      if (interval.endsWith('h')) {\n         schedule = `* */${interval.replace('h', '')} * * *`\n      } else if (interval.endsWith('d')) {\n         schedule = `* * */${interval.replace('d', '')} * *`\n      }\n      let options = {\n         cron: schedule\n      }\n      return this._request('PUT', `/schedules/${scheduleId}`, options, cb);\n   }\n\n   /**\n    * Update cron of Schedule\n    * @param {string} [scheduleId]\n    * @param {string} [cron]\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   updateCron(scheduleId, cron, cb) {\n      let options = {\n         cron: cron\n      }\n      return this._request('PUT', `/schedules/${scheduleId}`, options, cb);\n   }\n\n   /**\n    * Update state of Schedule\n    * @param {string} [scheduleId]\n    * @param {string} [state]\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   updateState(scheduleId, state, cb) {\n      let options = {\n         state: state\n      }\n      return this._request('PUT', `/schedules/${scheduleId}`, options, cb);\n   }\n\n   /**\n    * Delete a schedule\n    * @param {string} [scheduleId]\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   deleteSchedule(scheduleId, cb) {\n      return this._request('DELETE', `/schedules/${scheduleId}`, null, cb);\n   }\n\n   /**\n    * Delete schedules by userId\n    * @param {string} [userId]\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   deleteSchedulesByUser(userId, cb) {\n      return this._request('DELETE', `/schedules/users/${userId}`, null, cb);\n   }\n\n   /**\n    * Delete schedules by projectId\n    * @param {string} [projectId]\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   deleteSchedulesByProject(projectId, cb) {\n      return this._request('DELETE', `/schedules/projects/${projectId}`, null, cb);\n   }\n}\n\nmodule.exports = Schedule;\n","/**\n * @file\n * @copyright  2017 BlueHack Inc.\n * @license    Licensed under MIT.\n *             Github.js is freely distributable.\n */\n\nimport Requestable from './Requestable';\nimport debug from 'debug';\nconst log = debug('apiway:scheduler');\n\n/**\n * A Schedule allows scoping of API requests to a particular ApiWay user.\n */\nclass Scheduler extends Requestable {\n   /**\n    * Create a Schedule.\n    * @param {string} [schedulerId] -\n    * @param {Requestable.auth} [auth] - information required to authenticate to ApiWay\n    * @param {string} [apiBase=https://api.apiway.io] - the base ApiWay API URL\n    */\n   constructor(schedulerId, auth, apiBase) {\n      super(auth, apiBase);\n      this.schedulerId = schedulerId;\n   }\n\n   /**\n    * Create a Scheduler\n    * @param {object} options -\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   addScheduler(options, cb) {\n      return this._request('POST', '/schedulers', options, cb);\n   }\n\n   /**\n    * Update Scheduler\n    * @param {string} [schedulerId]\n    * @param {object} options -\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   updateScheduler(schedulerId, options, cb) {\n      return this._request('PUT', `/schedulers/${schedulerId}`, options, cb);\n   }\n\n   /**\n    * Add Schedules\n    * @param {string} [schedulerId]\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\n    * @return {Promise} - the promise for the http request\n    */\n   getScheduler(schedulerId, cb) {\n     return this._request('GET', `/schedulers/${schedulerId}`, null, cb);\n   }\n\n   /**\n    * Get Scheduler list\n    * @param {string} [schedulerId]\n    * @param {object} options -\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\n    * @return {Promise} - the promise for the http request\n    */\n   getSchedulers(options, cb) {\n      return this._request('GET', `/schedulers`, options, cb);\n   }\n\n   /**\n    * Delete a Scheduler\n    * @param {string} [schedulerId]\n    * @param {object} options -\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   deleteScheduler(schedulerId, options, cb) {\n      return this._request('DELETE', `/schedulers/${schedulerId}`, options, cb);\n   }\n\n   /**\n    * Delete a Schedule in aScheduler\n    * @param {string} [scheduleId]\n    * @param {object} options -\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   deleteSchedule(scheduleId, options, cb) {\n      return this._request('DELETE', `/schedulers/${scheduleId}`, options, cb);\n   }\n}\n\nmodule.exports = Scheduler;\n","/**\n * @file\n * @copyright  2017 BlueHack Inc.\n * @license    Licensed under MIT.\n *             Github.js is freely distributable.\n */\nimport Requestable from './Requestable';\nimport debug from 'debug';\nconst log = debug('apiway:user');\n\n/**\n * A User allows scoping of API requests to a particular ApiWay user.\n */\nclass User extends Requestable {\n   /**\n    * Create a User.\n    * @param {string} [username] - the user to use for user-scoped queries\n    * @param {Requestable.auth} [auth] - information required to authenticate to ApiWay\n    * @param {string} [apiBase=https://api.apiway.io] - the base ApiWay API URL\n    */\n   constructor(username, auth, apiBase) {\n      super(auth, apiBase);\n      this.__user = username;\n   }\n\n   /**\n    * Get the user's profile\n    * @param {string} [userId]\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\n    * @return {Promise} - the promise for the http request\n    */\n   getProfile(userId, cb) {\n     return this._request('GET', `/users/${userId}`, null, cb);\n   }\n\n   /**\n    * Update user's profile (Will create a new user if not exist)\n    * @param {object} options -\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   updateProfile(options, cb) {\n      return this._request('POST', '/users', options, cb);\n   }\n}\n\nmodule.exports = User;\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}