{"version":3,"names":[],"mappings":"","sources":["Schedule.js"],"sourcesContent":["/**\n * @file\n * @copyright  2017 BlueHack Inc.\n * @license    Licensed under MIT.\n *             Github.js is freely distributable.\n */\n\nimport Requestable from './Requestable';\nimport debug from 'debug';\nconst log = debug('apiway:schedule');\n\n/**\n * A Schedule allows scoping of API requests to a particular ApiWay user.\n */\nclass Schedule extends Requestable {\n   /**\n    * Create a Schedule.\n    * @param {string} [scheduleId] -\n    * @param {Requestable.auth} [auth] - information required to authenticate to ApiWay\n    * @param {string} [apiBase=https://api.apiway.io] - the base ApiWay API URL\n    */\n   constructor(scheduleId, auth, apiBase) {\n      super(auth, apiBase);\n      this.scheduleId = scheduleId;\n   }\n\n   /**\n    * Get schedule information\n    * @param {string} [scheduleId]\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\n    * @return {Promise} - the promise for the http request\n    */\n   getSchedule(scheduleId, cb) {\n     return this._request('GET', `/schedules/${scheduleId}`, null, cb);\n   }\n\n   /**\n    * Get schedule list\n    * @param {string} [scheduleId]\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\n    * @return {Promise} - the promise for the http request\n    */\n   getSchedules(options, cb) {\n      return this._request('GET', `/schedules`, options, cb);\n   }\n\n   /**\n    * Get user's schedules list\n    * @param {string} [userId]\n    * @param {object} options -\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\n    * @return {Promise} - the promise for the http request\n    */\n   getSchedulesByUser(userId, options, cb) {\n      return this._request('GET', `/schedules/users/${userId}`, options, cb);\n   }\n\n   /**\n    * Get project related schedule list\n    * @param {string} [projectId]\n    * @param {object} options -\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\n    * @return {Promise} - the promise for the http request\n    */\n   getSchedulesByProject(projectId, options, cb) {\n      return this._request('GET', `/schedules/projects/${projectId}`, options, cb);\n   }\n\n   /**\n    * Create a schedule\n    * @param {object} options -\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   addSchedule(options, cb) {\n      return this._request('POST', '/schedules', options, cb);\n   }\n\n   /**\n    * Update data of schedule\n    * @param {string} [scheduleId]\n    * @param {object} options -\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   updateSchedule(scheduleId, options, cb) {\n      return this._request('PUT', `/schedules/${scheduleId}`, options, cb);\n   }\n\n   /**\n    * Update cron of Schedule\n    * @param {string} [scheduleId]\n    * @param {string} [when]\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   updateScheduleWhen (scheduleId, when, cb) {\n      let schedule = ''\n      if (when.endsWith('m')) {\n         schedule = `${when.replace('m', '')} * * * *`\n      } else if (when.endsWith('h')) {\n         schedule = `* ${when.replace('h', '')} * * *`\n      }\n      let options = {\n         cron: schedule\n      }\n      return this._request('PUT', `/schedules/${scheduleId}`, options, cb);\n   }\n\n   /**\n    * Update cron of Schedule\n    * @param {string} [scheduleId]\n    * @param {string} [interval]\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   updateScheduleInterval(scheduleId, interval, cb) {\n      let schedule = ''\n      if (interval.endsWith('h')) {\n         schedule = `* */${interval.replace('h', '')} * * *`\n      } else if (interval.endsWith('d')) {\n         schedule = `* * */${interval.replace('d', '')} * *`\n      }\n      let options = {\n         cron: schedule\n      }\n      return this._request('PUT', `/schedules/${scheduleId}`, options, cb);\n   }\n\n   /**\n    * Update cron of Schedule\n    * @param {string} [scheduleId]\n    * @param {string} [cron]\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   updateCron(scheduleId, cron, cb) {\n      let options = {\n         cron: cron\n      }\n      return this._request('PUT', `/schedules/${scheduleId}`, options, cb);\n   }\n\n   /**\n    * Update state of Schedule\n    * @param {string} [scheduleId]\n    * @param {string} [state]\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   updateState(scheduleId, state, cb) {\n      let options = {\n         state: state\n      }\n      return this._request('PUT', `/schedules/${scheduleId}`, options, cb);\n   }\n\n   /**\n    * Delete a schedule\n    * @param {string} [scheduleId]\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   deleteSchedule(scheduleId, cb) {\n      return this._request('DELETE', `/schedules/${scheduleId}`, null, cb);\n   }\n\n   /**\n    * Delete schedules by userId\n    * @param {string} [userId]\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   deleteSchedulesByUser(userId, cb) {\n      return this._request('DELETE', `/schedules/users/${userId}`, null, cb);\n   }\n\n   /**\n    * Delete schedules by projectId\n    * @param {string} [projectId]\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   deleteSchedulesByProject(projectId, cb) {\n      return this._request('DELETE', `/schedules/projects/${projectId}`, null, cb);\n   }\n}\n\nmodule.exports = Schedule;\n"],"file":"Schedule.js"}