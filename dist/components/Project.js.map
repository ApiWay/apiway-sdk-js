{"version":3,"names":[],"mappings":"","sources":["Project.js"],"sourcesContent":["/**\n * @file\n * @copyright  2017 BlueHack Inc.\n * @license    Licensed under MIT.\n *             Github.js is freely distributable.\n */\n\nimport Requestable from './Requestable';\nimport debug from 'debug';\nconst log = debug('apiway:project');\n\n/**\n * A Project allows scoping of API requests to a particular ApiWay user.\n */\nclass Project extends Requestable {\n   /**\n    * Create a Project.\n    * @param {string} [fullName] - the project to use for user-scoped queries\n    * @param {Requestable.auth} [auth] - information required to authenticate to ApiWay\n    * @param {string} [apiBase=https://api.apiway.io] - the base ApiWay API URL\n    */\n   constructor(fullName, auth, apiBase) {\n      super(auth, apiBase);\n      this.fullName = fullName;\n   }\n\n   /**\n    * Get project information\n    * @param {string} [projectId]\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\n    * @return {Promise} - the promise for the http request\n    */\n   getProject(projectId, cb) {\n     return this._request('GET', `/projects/${projectId}`, null, cb);\n   }\n\n   /**\n    * Get user's project list\n    * @param {string} [userId]\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\n    * @return {Promise} - the promise for the http request\n    */\n   getProjectsByUser(userId, cb) {\n      return this._request('GET', `/projects/users/${userId}`, null, cb);\n   }\n\n   /**\n    * Add a repo as a Project\n    * @param {object} options -\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   addProject(options, cb) {\n      return this._request('POST', '/projects', options, cb);\n   }\n\n   /**\n    * Update data of project\n    * @param {string} [projectId]\n    * @param {object} options -\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   updateProject(projectId, options, cb) {\n      return this._request('PUT', `/projects/${projectId}`, options, cb);\n   }\n\n   /**\n    * Add a email subscriber\n    * @param {string} [projectId]\n    * @param {object} options -\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   addEmailSubscriber(projectId, options, cb) {\n      return this._request('POST', `/projects/${projectId}/subscribe/email`, options, cb);\n   }\n\n   /**\n    * Delete a email subscriber\n    * @param {string} [projectId]\n    * @param {object} options -\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   deleteEmailSubscriber(projectId, options, cb) {\n      return this._request('DELETE', `/projects/${projectId}/subscribe/email`, options, cb);\n   }\n\n   setScheduleId(projectId, scheduleId, cb) {\n      var options = {\n         scheduleId: scheduleId\n      }\n      return this._request('PUT', `/projects/${projectId}`, options, cb);\n   }\n\n   /**\n    * Update schedule of project\n    * @param {string} [projectId]\n    * @param {string} [when]\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   updateScheduleWhen (projectId, when, cb) {\n      let schedule = ''\n      if (when.endsWith('m')) {\n         schedule = `${when.replace('m', '')} * * * *`\n      } else if (when.endsWith('h')) {\n         schedule = `* ${when.replace('h', '')} * * *`\n      }\n      let options = {\n         schedule: schedule\n      }\n      return this._request('PUT', `/projects/${projectId}`, options, cb);\n   }\n\n   /**\n    * Update schedule of project\n    * @param {string} [projectId]\n    * @param {string} [interval]\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   updateScheduleInterval(projectId, interval, cb) {\n      let schedule = ''\n      if (interval.endsWith('h')) {\n         schedule = `* */${interval.replace('h', '')} * * *`\n      } else if (interval.endsWith('d')) {\n         schedule = `* * */${interval.replace('d', '')} * *`\n      }\n      let options = {\n         schedule: schedule\n      }\n      return this._request('PUT', `/projects/${projectId}`, options, cb);\n   }\n\n   /**\n    * Update schedule of project\n    * @param {string} [projectId]\n    * @param {string} [cron]\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   updateScheduleCron(projectId, cron, cb) {\n      let options = {\n         schedule: cron\n      }\n      return this._request('PUT', `/projects/${projectId}`, options, cb);\n   }\n\n   /**\n    * Delete a project\n    * @param {string} [projectId]\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   deleteProject(projectId, cb) {\n      return this._request('DELETE', `/projects/${projectId}`, null, cb);\n   }\n}\n\nmodule.exports = Project;\n"],"file":"Project.js"}