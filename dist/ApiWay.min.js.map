{"version":3,"sources":["node_modules/browser-pack/_prelude.js","lib/ApiWay.js","lib/Instance.js","lib/Project.js","lib/Requestable.js","lib/Schedule.js","lib/Scheduler.js","lib/User.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","ApiWay","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","_User","_Project","_Instance","_Schedule","_Scheduler","auth","apiBase","arguments","undefined","_classCallCheck","__apiBase","__auth","user","_User2","default","fullName","_Project2","instance","_Instance2","scheduleId","_Schedule2","schedulerId","_Scheduler2","_Requestable2","_debug","Instance","_debug2","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","instanceId","cb","_request","userId","options","projectId","Project","when","schedule","endsWith","replace","interval","cron","methodHasNoBody","method","METHODS_WITH_NO_BODY","indexOf","getNextPage","split","reduce","nextUrl","link","search","match","callbackErrorOrThrow","path","object","error","hasOwnProperty","_object$response","response","status","statusText","_object$config","config","url","message","ResponseError","log","JSON","stringify","data","_axios","_jsBase","request","Requestable","AcceptHeader","token","username","password","__AcceptHeader","__authorizationHeader","Base64","encode","newCacheBuster","Date","getTime","raw","headers","Content-Type","Accept","Authorization","requestOptions","visibility","affiliation","type","sort","per_page","date","toISOString","__getURL","__getRequestHeaders","queryParams","_typeof","params","responseType","requestPromise","_axios2","catch","then","keys","results","_this2","_results","thisGroup","Array","items","push","apply","_toConsumableArray","page","_requestAllPages","Schedule","state","Scheduler","User","__user"],"mappings":"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","file":"ApiWay.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * @file\n * @copyright  2017 BlueHack Inc.\n * @license    Licensed under MIT.\n *             Github.js is freely distributable.\n */\n/* eslint valid-jsdoc: [\"error\", {\"requireReturnDescription\": false}] */\n\nimport User from './User';\nimport Project from './Project';\nimport Instance from './Instance';\nimport Schedule from './Schedule';\nimport Scheduler from './Scheduler';\n\n/**\n * ApiWay encapsulates the functionality to create various API wrapper objects.\n */\nclass ApiWay {\n   /**\n    * Create a new ApiWay.\n    * @param {Requestable.auth} [auth] - the credentials to authenticate to ApiWay. If auth is\n    *                                  not provided requests will be made unauthenticated\n    * @param {string} [apiBase=https://api.apiway.io] - the base ApiWay API URL\n    */\n   // constructor(auth, apiBase = 'http://api.apiway.io') {\n    constructor(auth, apiBase = 'http://127.0.0.1:3000') {\n      this.__apiBase = apiBase;\n      this.__auth = auth || {};\n   }\n\n   /**\n    * Create a new User wrapper\n    * @param {string} [user] - the name of the user to get information about\n    *                        leave undefined for the authenticated user\n    * @return {User}\n    */\n   getUser(user) {\n      return new User(user, this.__auth, this.__apiBase);\n   }\n\n   /**\n    * Create a new Project wrapper\n    * @param {string} [fullName] - the name of the project to get information about\n    *                        leave undefined for the authenticated user\n    * @return {Project}\n    */\n   getProject(fullName) {\n      return new Project(fullName, this.__auth, this.__apiBase);\n   }\n\n   /**\n    * Create a new Instance wrapper\n    * @param {string} [instance] - the id of the instance to get information about\n    *                        leave undefined for the authenticated user\n    * @return {Instance}\n    */\n   getInstance(instance) {\n      return new Instance(instance, this.__auth, this.__apiBase);\n   }\n\n   /**\n    * Create a new Schedule wrapper\n    * @param {string} [scheduleId] - the id of the instance to get information about\n    *                        leave undefined for the authenticated user\n    * @return {Schedule}\n    */\n   getSchedule(scheduleId) {\n      return new Schedule(scheduleId, this.__auth, this.__apiBase);\n   }\n\n   /**\n    * Create a new Scheduler wrapper\n    * @param {string} [schedulerId] - the id of the instance to get information about\n    *                        leave undefined for the authenticated user\n    * @return {Schedule}\n    */\n   getScheduler(schedulerId) {\n      return new Scheduler(schedulerId, this.__auth, this.__apiBase);\n   }\n}\n\nmodule.exports = ApiWay;\n","/**\n * @file\n * @copyright  2017 BlueHack Inc.\n * @license    Licensed under MIT.\n *             Github.js is freely distributable.\n */\nimport Requestable from './Requestable';\nimport debug from 'debug';\nconst log = debug('apiway:instance');\n\n/**\n * A Project allows scoping of API requests to a particular ApiWay user.\n */\nclass Instance extends Requestable {\n   /**\n    * Create a Instance.\n    * @param {string} [instance] - the instance to use for user-scoped queries\n    * @param {Requestable.auth} [auth] - information required to authenticate to ApiWay\n    * @param {string} [apiBase=https://api.apiway.io] - the base ApiWay API URL\n    */\n   constructor(instance, auth, apiBase) {\n      super(auth, apiBase);\n      this.instanceId = instance;\n   }\n\n   /**\n    * Get project information\n    * @param {string} [projectId]\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\n    * @return {Promise} - the promise for the http request\n    */\n   getInstance(instanceId, cb) {\n     return this._request('GET', `/instances/${instanceId}`, null, cb);\n   }\n\n   /**\n    * Get user's project list\n    * @param {string} [userId]\n    * @param {object} options -\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\n    * @return {Promise} - the promise for the http request\n    */\n   getInstancesByUser(userId, options, cb) {\n      return this._request('GET', `/instances/users/${userId}`, options, cb);\n   }\n\n   /**\n    * Get project's instance list\n    * @param {string} [projectId]\n    * @param {object} options -\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\n    * @return {Promise} - the promise for the http request\n    */\n   getInstancesByProject(projectId, options, cb) {\n      return this._request('GET', `/instances/projects/${projectId}`, options, cb);\n   }\n\n   /**\n    * Add a new Instance\n    * @param {object} options -\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   addInstance(options, cb) {\n      return this._request('POST', '/instances', options, cb);\n   }\n\n   /**\n    * Update user's profile (Will create a new user if not exist)\n    * @param {object} options -\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   updateInstance(instanceId, options, cb) {\n      return this._request('PUT', `/instances/${instanceId}`, options, cb);\n   }\n}\n\nmodule.exports = Instance;\n","/**\n * @file\n * @copyright  2017 BlueHack Inc.\n * @license    Licensed under MIT.\n *             Github.js is freely distributable.\n */\n\nimport Requestable from './Requestable';\nimport debug from 'debug';\nconst log = debug('apiway:project');\n\n/**\n * A Project allows scoping of API requests to a particular ApiWay user.\n */\nclass Project extends Requestable {\n   /**\n    * Create a Project.\n    * @param {string} [fullName] - the project to use for user-scoped queries\n    * @param {Requestable.auth} [auth] - information required to authenticate to ApiWay\n    * @param {string} [apiBase=https://api.apiway.io] - the base ApiWay API URL\n    */\n   constructor(fullName, auth, apiBase) {\n      super(auth, apiBase);\n      this.fullName = fullName;\n   }\n\n   /**\n    * Get project information\n    * @param {string} [projectId]\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\n    * @return {Promise} - the promise for the http request\n    */\n   getProject(projectId, cb) {\n     return this._request('GET', `/projects/${projectId}`, null, cb);\n   }\n\n   /**\n    * Get user's project list\n    * @param {string} [userId]\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\n    * @return {Promise} - the promise for the http request\n    */\n   getProjectsByUser(userId, cb) {\n      return this._request('GET', `/projects/users/${userId}`, null, cb);\n   }\n\n   /**\n    * Add a repo as a Project\n    * @param {object} options -\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   addProject(options, cb) {\n      return this._request('POST', '/projects', options, cb);\n   }\n\n   /**\n    * Update data of project\n    * @param {string} [projectId]\n    * @param {object} options -\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   updateProject(projectId, options, cb) {\n      return this._request('PUT', `/projects/${projectId}`, options, cb);\n   }\n\n   /**\n    * Add a email subscriber\n    * @param {string} [projectId]\n    * @param {object} options -\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   addEmailSubscriber(projectId, options, cb) {\n      return this._request('POST', `/projects/${projectId}/subscribe/email`, options, cb);\n   }\n\n   /**\n    * Delete a email subscriber\n    * @param {string} [projectId]\n    * @param {object} options -\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   deleteEmailSubscriber(projectId, options, cb) {\n      return this._request('DELETE', `/projects/${projectId}/subscribe/email`, options, cb);\n   }\n\n   setScheduleId(projectId, scheduleId, cb) {\n      var options = {\n         scheduleId: scheduleId\n      }\n      return this._request('PUT', `/projects/${projectId}`, options, cb);\n   }\n\n   /**\n    * Update schedule of project\n    * @param {string} [projectId]\n    * @param {string} [when]\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   updateScheduleWhen (projectId, when, cb) {\n      let schedule = ''\n      if (when.endsWith('m')) {\n         schedule = `${when.replace('m', '')} * * * *`\n      } else if (when.endsWith('h')) {\n         schedule = `* ${when.replace('h', '')} * * *`\n      }\n      let options = {\n         schedule: schedule\n      }\n      return this._request('PUT', `/projects/${projectId}`, options, cb);\n   }\n\n   /**\n    * Update schedule of project\n    * @param {string} [projectId]\n    * @param {string} [interval]\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   updateScheduleInterval(projectId, interval, cb) {\n      let schedule = ''\n      if (interval.endsWith('h')) {\n         schedule = `* */${interval.replace('h', '')} * * *`\n      } else if (interval.endsWith('d')) {\n         schedule = `* * */${interval.replace('d', '')} * *`\n      }\n      let options = {\n         schedule: schedule\n      }\n      return this._request('PUT', `/projects/${projectId}`, options, cb);\n   }\n\n   /**\n    * Update schedule of project\n    * @param {string} [projectId]\n    * @param {string} [cron]\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   updateScheduleCron(projectId, cron, cb) {\n      let options = {\n         schedule: cron\n      }\n      return this._request('PUT', `/projects/${projectId}`, options, cb);\n   }\n\n   /**\n    * Delete a project\n    * @param {string} [projectId]\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   deleteProject(projectId, cb) {\n      return this._request('DELETE', `/projects/${projectId}`, null, cb);\n   }\n}\n\nmodule.exports = Project;\n","/**\n * @file\n * @copyright  2017 BlueHack Inc.\n * @license    Licensed under MIT.\n *             Github.js is freely distributable.\n */\n\nimport axios from 'axios';\nimport debug from 'debug';\nimport {Base64} from 'js-base64';\n\nconst log = debug('apiway:request');\n\n/**\n * The error structure returned when a network call fails\n */\nclass ResponseError extends Error {\n   /**\n    * Construct a new ResponseError\n    * @param {string} message - an message to return instead of the the default error message\n    * @param {string} path - the requested path\n    * @param {Object} response - the object returned by Axios\n    */\n   constructor(message, path, response) {\n      super(message);\n      this.path = path;\n      this.request = response.config;\n      this.response = (response || {}).response || response;\n      this.status = response.status;\n   }\n}\n\n/**\n * Requestable wraps the logic for making http requests to the API\n */\nclass Requestable {\n   /**\n    * Either a username and password or an oauth token for ApiWay\n    * @typedef {Object} Requestable.auth\n    * @prop {string} [username] - the ApiWay username\n    * @prop {string} [password] - the user's password\n    * @prop {token} [token] - an OAuth token\n    */\n   /**\n    * Initialize the http internals.\n    * @param {Requestable.auth} [auth] - the credentials to authenticate to ApiWay. If auth is\n    *                                  not provided request will be made unauthenticated\n    * @param {string} [apiBase=https://api.apiway.io] - the base ApiWay API URL\n    * @param {string} [AcceptHeader=v3] - the accept header for the requests\n    */\n   constructor(auth, apiBase, AcceptHeader) {\n      // this.__apiBase = apiBase || 'https://api.apiway.io';\n      this.__apiBase = apiBase || 'https://api.apiway.io';\n      this.__auth = {\n         token: auth.token,\n         username: auth.username,\n         password: auth.password,\n      };\n      this.__AcceptHeader = AcceptHeader || 'v3';\n\n      if (auth.token) {\n         this.__authorizationHeader = 'token ' + auth.token;\n      } else if (auth.username && auth.password) {\n         this.__authorizationHeader = 'Basic ' + Base64.encode(auth.username + ':' + auth.password);\n      }\n   }\n\n   /**\n    * Compute the URL to use to make a request.\n    * @private\n    * @param {string} path - either a URL relative to the API base or an absolute URL\n    * @return {string} - the URL to use\n    */\n   __getURL(path) {\n      let url = path;\n\n      if (path.indexOf('//') === -1) {\n         url = this.__apiBase + path;\n      }\n\n      let newCacheBuster = 'timestamp=' + new Date().getTime();\n      return url.replace(/(timestamp=\\d+)/, newCacheBuster);\n   }\n\n   /**\n    * Compute the headers required for an API request.\n    * @private\n    * @param {boolean} raw - if the request should be treated as JSON or as a raw request\n    * @param {string} AcceptHeader - the accept header for the request\n    * @return {Object} - the headers to use in the request\n    */\n   __getRequestHeaders(raw, AcceptHeader) {\n      let headers = {\n         'Content-Type': 'application/json;charset=UTF-8',\n         'Accept': 'application/vnd.apiway.' + (AcceptHeader || this.__AcceptHeader),\n      };\n\n      if (raw) {\n         headers.Accept += '.raw';\n      }\n      headers.Accept += '+json';\n\n      if (this.__authorizationHeader) {\n         headers.Authorization = this.__authorizationHeader;\n      }\n\n      return headers;\n   }\n\n   /**\n    * Sets the default options for API requests\n    * @protected\n    * @param {Object} [requestOptions={}] - the current options for the request\n    * @return {Object} - the options to pass to the request\n    */\n   _getOptionsWithDefaults(requestOptions = {}) {\n      if (!(requestOptions.visibility || requestOptions.affiliation)) {\n         requestOptions.type = requestOptions.type || 'all';\n      }\n      requestOptions.sort = requestOptions.sort || 'updated';\n      requestOptions.per_page = requestOptions.per_page || '100'; // eslint-disable-line\n\n      return requestOptions;\n   }\n\n   /**\n    * if a `Date` is passed to this function it will be converted to an ISO string\n    * @param {*} date - the object to attempt to cooerce into an ISO date string\n    * @return {string} - the ISO representation of `date` or whatever was passed in if it was not a date\n    */\n   _dateToISO(date) {\n      if (date && (date instanceof Date)) {\n         date = date.toISOString();\n      }\n\n      return date;\n   }\n\n   /**\n    * A function that receives the result of the API request.\n    * @callback Requestable.callback\n    * @param {Requestable.Error} error - the error returned by the API or `null`\n    * @param {(Object|true)} result - the data returned by the API or `true` if the API returns `204 No Content`\n    * @param {Object} request - the raw {@linkcode https://apiway.com/mzabriskie/axios#response-schema Response}\n    */\n   /**\n    * Make a request.\n    * @param {string} method - the method for the request (GET, PUT, POST, DELETE)\n    * @param {string} path - the path for the request\n    * @param {*} [data] - the data to send to the server. For HTTP methods that don't have a body the data\n    *                   will be sent as query parameters\n    * @param {Requestable.callback} [cb] - the callback for the request\n    * @param {boolean} [raw=false] - if the request should be sent as raw. If this is a falsy value then the\n    *                              request will be made as JSON\n    * @return {Promise} - the Promise for the http request\n    */\n   _request(method, path, data, cb, raw) {\n      const url = this.__getURL(path);\n      // console.log(url)\n\n      const AcceptHeader = (data || {}).AcceptHeader;\n      if (AcceptHeader) {\n         delete data.AcceptHeader;\n      }\n      const headers = this.__getRequestHeaders(raw, AcceptHeader);\n\n      let queryParams = {};\n\n      const shouldUseDataAsParams = data && (typeof data === 'object') && methodHasNoBody(method);\n      if (shouldUseDataAsParams) {\n         queryParams = data;\n         data = undefined;\n      }\n\n      const config = {\n         url: url,\n         method: method,\n         headers: headers,\n         params: queryParams,\n         data: data,\n         responseType: raw ? 'text' : 'json',\n      };\n\n      // console.log(config)\n      log(`${config.method} to ${config.url}`);\n      const requestPromise = axios(config).catch(callbackErrorOrThrow(cb, path));\n\n      if (cb) {\n         requestPromise.then((response) => {\n            if (response.data && Object.keys(response.data).length > 0) {\n               // When data has results\n               cb(null, response.data, response);\n            } else if (config.method !== 'GET' && Object.keys(response.data).length < 1) {\n               // True when successful submit a request and receive a empty object\n               cb(null, (response.status < 300), response);\n            } else {\n               cb(null, response.data, response);\n            }\n         });\n      }\n\n      return requestPromise;\n   }\n\n   /**\n    * Make a request to an endpoint the returns 204 when true and 404 when false\n    * @param {string} path - the path to request\n    * @param {Object} data - any query parameters for the request\n    * @param {Requestable.callback} cb - the callback that will receive `true` or `false`\n    * @param {method} [method=GET] - HTTP Method to use\n    * @return {Promise} - the promise for the http request\n    */\n   _request204or404(path, data, cb, method = 'GET') {\n      return this._request(method, path, data)\n         .then(function success(response) {\n            if (cb) {\n               cb(null, true, response);\n            }\n            return true;\n         }, function failure(response) {\n            if (response.response.status === 404) {\n               if (cb) {\n                  cb(null, false, response);\n               }\n               return false;\n            }\n\n            if (cb) {\n               cb(response);\n            }\n            throw response;\n         });\n   }\n\n   /**\n    * Make a request and fetch all the available data. ApiWay will paginate responses so for queries\n    * that might span multiple pages this method is preferred to {@link Requestable#request}\n    * @param {string} path - the path to request\n    * @param {Object} options - the query parameters to include\n    * @param {Requestable.callback} [cb] - the function to receive the data. The returned data will always be an array.\n    * @param {Object[]} results - the partial results. This argument is intended for interal use only.\n    * @return {Promise} - a promise which will resolve when all pages have been fetched\n    * @deprecated This will be folded into {@link Requestable#_request} in the 2.0 release.\n    */\n   _requestAllPages(path, options, cb, results) {\n      results = results || [];\n\n      return this._request('GET', path, options)\n         .then((response) => {\n            let thisGroup;\n            if (response.data instanceof Array) {\n               thisGroup = response.data;\n            } else if (response.data.items instanceof Array) {\n               thisGroup = response.data.items;\n            } else {\n               let message = `cannot figure out how to append ${response.data} to the result set`;\n               throw new ResponseError(message, path, response);\n            }\n            results.push(...thisGroup);\n\n            const nextUrl = getNextPage(response.headers.link);\n            if (nextUrl && typeof options.page !== 'number') {\n               log(`getting next page: ${nextUrl}`);\n               return this._requestAllPages(nextUrl, options, cb, results);\n            }\n\n            if (cb) {\n               cb(null, results, response);\n            }\n\n            response.data = results;\n            return response;\n         }).catch(callbackErrorOrThrow(cb, path));\n   }\n}\n\nmodule.exports = Requestable;\n\n// ////////////////////////// //\n//  Private helper functions  //\n// ////////////////////////// //\nconst METHODS_WITH_NO_BODY = ['GET', 'HEAD', 'DELETE'];\nfunction methodHasNoBody(method) {\n   return METHODS_WITH_NO_BODY.indexOf(method) !== -1;\n}\n\nfunction getNextPage(linksHeader = '') {\n   const links = linksHeader.split(/\\s*,\\s*/); // splits and strips the urls\n   return links.reduce(function(nextUrl, link) {\n      if (link.search(/rel=\"next\"/) !== -1) {\n         return (link.match(/<(.*)>/) || [])[1];\n      }\n\n      return nextUrl;\n   }, undefined);\n}\n\nfunction callbackErrorOrThrow(cb, path) {\n   return function handler(object) {\n      let error;\n      if (object.hasOwnProperty('config')) {\n         const {response: {status, statusText}, config: {method, url}} = object;\n         let message = (`${status} error making request ${method} ${url}: \"${statusText}\"`);\n         error = new ResponseError(message, path, object);\n         log(`${message} ${JSON.stringify(object.data)}`);\n      } else {\n         error = object;\n      }\n      if (cb) {\n         log('going to error callback');\n         cb(error);\n      } else {\n         log('throwing error');\n         throw error;\n      }\n   };\n}\n","/**\n * @file\n * @copyright  2017 BlueHack Inc.\n * @license    Licensed under MIT.\n *             Github.js is freely distributable.\n */\n\nimport Requestable from './Requestable';\nimport debug from 'debug';\nconst log = debug('apiway:schedule');\n\n/**\n * A Schedule allows scoping of API requests to a particular ApiWay user.\n */\nclass Schedule extends Requestable {\n   /**\n    * Create a Schedule.\n    * @param {string} [scheduleId] -\n    * @param {Requestable.auth} [auth] - information required to authenticate to ApiWay\n    * @param {string} [apiBase=https://api.apiway.io] - the base ApiWay API URL\n    */\n   constructor(scheduleId, auth, apiBase) {\n      super(auth, apiBase);\n      this.scheduleId = scheduleId;\n   }\n\n   /**\n    * Get schedule information\n    * @param {string} [scheduleId]\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\n    * @return {Promise} - the promise for the http request\n    */\n   getSchedule(scheduleId, cb) {\n     return this._request('GET', `/schedules/${scheduleId}`, null, cb);\n   }\n\n   /**\n    * Get schedule list\n    * @param {string} [scheduleId]\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\n    * @return {Promise} - the promise for the http request\n    */\n   getSchedules(options, cb) {\n      return this._request('GET', `/schedules`, options, cb);\n   }\n\n   /**\n    * Get user's schedules list\n    * @param {string} [userId]\n    * @param {object} options -\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\n    * @return {Promise} - the promise for the http request\n    */\n   getSchedulesByUser(userId, options, cb) {\n      return this._request('GET', `/schedules/users/${userId}`, options, cb);\n   }\n\n   /**\n    * Get project related schedule list\n    * @param {string} [projectId]\n    * @param {object} options -\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\n    * @return {Promise} - the promise for the http request\n    */\n   getSchedulesByProject(projectId, options, cb) {\n      return this._request('GET', `/schedules/projects/${projectId}`, options, cb);\n   }\n\n   /**\n    * Create a schedule\n    * @param {object} options -\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   addSchedule(options, cb) {\n      return this._request('POST', '/schedules', options, cb);\n   }\n\n   /**\n    * Update data of schedule\n    * @param {string} [scheduleId]\n    * @param {object} options -\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   updateSchedule(scheduleId, options, cb) {\n      return this._request('PUT', `/schedules/${scheduleId}`, options, cb);\n   }\n\n   /**\n    * Update cron of Schedule\n    * @param {string} [scheduleId]\n    * @param {string} [when]\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   updateScheduleWhen (scheduleId, when, cb) {\n      let schedule = ''\n      if (when.endsWith('m')) {\n         schedule = `${when.replace('m', '')} * * * *`\n      } else if (when.endsWith('h')) {\n         schedule = `* ${when.replace('h', '')} * * *`\n      }\n      let options = {\n         cron: schedule\n      }\n      return this._request('PUT', `/schedules/${scheduleId}`, options, cb);\n   }\n\n   /**\n    * Update cron of Schedule\n    * @param {string} [scheduleId]\n    * @param {string} [interval]\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   updateScheduleInterval(scheduleId, interval, cb) {\n      let schedule = ''\n      if (interval.endsWith('h')) {\n         schedule = `* */${interval.replace('h', '')} * * *`\n      } else if (interval.endsWith('d')) {\n         schedule = `* * */${interval.replace('d', '')} * *`\n      }\n      let options = {\n         cron: schedule\n      }\n      return this._request('PUT', `/schedules/${scheduleId}`, options, cb);\n   }\n\n   /**\n    * Update cron of Schedule\n    * @param {string} [scheduleId]\n    * @param {string} [cron]\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   updateCron(scheduleId, cron, cb) {\n      let options = {\n         cron: cron\n      }\n      return this._request('PUT', `/schedules/${scheduleId}`, options, cb);\n   }\n\n   /**\n    * Update state of Schedule\n    * @param {string} [scheduleId]\n    * @param {string} [state]\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   updateState(scheduleId, state, cb) {\n      let options = {\n         state: state\n      }\n      return this._request('PUT', `/schedules/${scheduleId}`, options, cb);\n   }\n\n   /**\n    * Delete a schedule\n    * @param {string} [scheduleId]\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   deleteSchedule(scheduleId, cb) {\n      return this._request('DELETE', `/schedules/${scheduleId}`, null, cb);\n   }\n\n   /**\n    * Delete schedules by userId\n    * @param {string} [userId]\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   deleteSchedulesByUser(userId, cb) {\n      return this._request('DELETE', `/schedules/users/${userId}`, null, cb);\n   }\n\n   /**\n    * Delete schedules by projectId\n    * @param {string} [projectId]\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   deleteSchedulesByProject(projectId, cb) {\n      return this._request('DELETE', `/schedules/projects/${projectId}`, null, cb);\n   }\n}\n\nmodule.exports = Schedule;\n","/**\n * @file\n * @copyright  2017 BlueHack Inc.\n * @license    Licensed under MIT.\n *             Github.js is freely distributable.\n */\n\nimport Requestable from './Requestable';\nimport debug from 'debug';\nconst log = debug('apiway:scheduler');\n\n/**\n * A Schedule allows scoping of API requests to a particular ApiWay user.\n */\nclass Scheduler extends Requestable {\n   /**\n    * Create a Schedule.\n    * @param {string} [schedulerId] -\n    * @param {Requestable.auth} [auth] - information required to authenticate to ApiWay\n    * @param {string} [apiBase=https://api.apiway.io] - the base ApiWay API URL\n    */\n   constructor(schedulerId, auth, apiBase) {\n      super(auth, apiBase);\n      this.schedulerId = schedulerId;\n   }\n\n   /**\n    * Create a Scheduler\n    * @param {object} options -\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   addScheduler(options, cb) {\n      return this._request('POST', '/schedulers', options, cb);\n   }\n\n   /**\n    * Update Scheduler\n    * @param {string} [schedulerId]\n    * @param {object} options -\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   updateScheduler(schedulerId, options, cb) {\n      return this._request('PUT', `/schedulers/${schedulerId}`, options, cb);\n   }\n\n   /**\n    * Add Schedules\n    * @param {string} [schedulerId]\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\n    * @return {Promise} - the promise for the http request\n    */\n   getScheduler(schedulerId, cb) {\n     return this._request('GET', `/schedulers/${schedulerId}`, null, cb);\n   }\n\n   /**\n    * Get Scheduler list\n    * @param {string} [schedulerId]\n    * @param {object} options -\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\n    * @return {Promise} - the promise for the http request\n    */\n   getSchedulers(options, cb) {\n      return this._request('GET', `/schedulers`, options, cb);\n   }\n\n   /**\n    * Delete a Scheduler\n    * @param {string} [schedulerId]\n    * @param {object} options -\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   deleteScheduler(schedulerId, options, cb) {\n      return this._request('DELETE', `/schedulers/${schedulerId}`, options, cb);\n   }\n\n   /**\n    * Delete a Schedule in aScheduler\n    * @param {string} [scheduleId]\n    * @param {object} options -\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   deleteSchedule(scheduleId, options, cb) {\n      return this._request('DELETE', `/schedulers/${scheduleId}`, options, cb);\n   }\n}\n\nmodule.exports = Scheduler;\n","/**\n * @file\n * @copyright  2017 BlueHack Inc.\n * @license    Licensed under MIT.\n *             Github.js is freely distributable.\n */\nimport Requestable from './Requestable';\nimport debug from 'debug';\nconst log = debug('apiway:user');\n\n/**\n * A User allows scoping of API requests to a particular ApiWay user.\n */\nclass User extends Requestable {\n   /**\n    * Create a User.\n    * @param {string} [username] - the user to use for user-scoped queries\n    * @param {Requestable.auth} [auth] - information required to authenticate to ApiWay\n    * @param {string} [apiBase=https://api.apiway.io] - the base ApiWay API URL\n    */\n   constructor(username, auth, apiBase) {\n      super(auth, apiBase);\n      this.__user = username;\n   }\n\n   /**\n    * Get the user's profile\n    * @param {string} [userId]\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\n    * @return {Promise} - the promise for the http request\n    */\n   getProfile(userId, cb) {\n     return this._request('GET', `/users/${userId}`, null, cb);\n   }\n\n   /**\n    * Update user's profile (Will create a new user if not exist)\n    * @param {object} options -\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   updateProfile(options, cb) {\n      return this._request('POST', '/users', options, cb);\n   }\n}\n\nmodule.exports = User;\n"]}